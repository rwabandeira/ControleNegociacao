unit Produtores;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, CrudCadastro, StdCtrls, Buttons, ExtCtrls, Mask, SqlExPr,
  PesquisarProdutores, _Produtor, UITypes, _Biblioteca, Grids, _LimiteCredito,
  PesquisarDistribuidores;

type
  TFrProdutores = class(TFrCrudCadastro)
    lbCodigo: TLabel;
    lbNome: TLabel;
    lbCpfCnpj: TLabel;
    eCodigo: TEdit;
    eNome: TEdit;
    rgInscricao: TRadioGroup;
    meCpfCnpj: TMaskEdit;
    stLimiteCredito: TStaticText;
    sgLimiteCredito: TStringGrid;
    btInserir: TButton;
    btAlterar: TButton;
    btRemover: TButton;
    procedure btCancelarClick(Sender: TObject);
    procedure btExcluirClick(Sender: TObject);
    procedure btGravarClick(Sender: TObject);
    procedure btPesquisarClick(Sender: TObject);
    procedure eCodigoKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure rgInscricaoClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btInserirClick(Sender: TObject);
  private
    { Private declarations }
    limite_creditos: TArrayOfWebLimiteCredito;
    novo_registro: Boolean;
    produtores: TArrayOfWebProdutor;
    procedure MontarDados(produtores: TArrayOfWebProdutor);
    procedure VerificarDados;
    procedure PreencherGrid;
  public
    { Public declarations }
  end;

const
  //sgLimiteCredito
  cDistribuidor     = 0;
  cLimite_Credito   = 1;
  //sgLimiteCredito(ocultas)
  cDistribuidor_Id  = 2;

var
  FrProdutores: TFrProdutores;

implementation

{$R *.dfm}

uses _DB;

procedure TFrProdutores.PreencherGrid;
var
  i: Integer;
  linha: Integer;
begin
  linha := sgLimiteCredito.FixedRows;
  sgLimiteCredito.RowCount := sgLimiteCredito.FixedRows + 1;

  for i := Low(limite_creditos) to High(limite_creditos) do begin
    sgLimiteCredito.Cells[cDistribuidor, linha] := IntToStr(limite_creditos[i].distribuidor_id) + limite_creditos[i].nome_distribuidor;
    sgLimiteCredito.Cells[cLimite_Credito, linha] := FloatToStr(limite_creditos[i].limite_credito);

    sgLimiteCredito.Cells[cDistribuidor_Id, linha] := IntToStr(limite_creditos[i].distribuidor_id);

    linha := linha + 1;
  end;

  sgLimiteCredito.RowCount := IIf(linha <> sgLimiteCredito.RowCount -1, linha, sgLimiteCredito.RowCount);
end;

procedure TFrProdutores.btCancelarClick(Sender: TObject);
begin
  inherited;
  eCodigo.Clear;
  eNome.Clear;
  rgInscricao.ItemIndex := -1;
  lbCpfCnpj.Caption := 'CPF/CNPJ';
  meCpfCnpj.Clear;
  meCpfCnpj.EditMask := '';
  sgLimiteCredito.RowCount := sgLimiteCredito.FixedRows + 1;
  sgLimiteCredito.Row := sgLimiteCredito.FixedRows;

  eCodigo.Enabled := True;
  eNome.Enabled := False;
  rgInscricao.Enabled := False;
  meCpfCnpj.Enabled := False;
  sgLimiteCredito.Enabled := False;
  btInserir.Enabled := False;
  btAlterar.Enabled := False;
  btRemover.Enabled := False;

  novo_registro := True;
  limite_creditos := nil;

  eCodigo.SetFocus;
end;

procedure TFrProdutores.btExcluirClick(Sender: TObject);
var
  con: TSqlConnection;
begin
  inherited;
  if eCodigo.Text = '' then
    Abort;

  if MessageDlg('Deseja remover o produtor selecionado?', mtconfirmation, mbokcancel, 0) = 1 then begin
    con := _DB.Conexao;

    try
      _Produtor.ExcluirProdutor(con, StrToInt(eCodigo.Text));
      Application.MessageBox('Registro excluido com sucesso!', 'Atenção', 0);
      btCancelarClick(Self);
    except on e: Exception do
      ShowMessage(e.Message);
    End;
  end;
end;

procedure TFrProdutores.btGravarClick(Sender: TObject);
var
  con: TSqlConnection;
  produtor: WebProdutor;
  i: Integer;
begin
  inherited;
  VerificarDados;
  
  con := _DB.Conexao;

  if eCodigo.Text = '' then
    produtor.produtor_id := 0
  else
    produtor.produtor_id := StrToInt(eCodigo.Text);

  produtor.nome := eNome.Text;

  if rgInscricao.ItemIndex = 0 then
    produtor.inscricao := 'F'
  else
    produtor.inscricao := 'J';

  produtor.cpf_cnpj := meCpfCnpj.Text;

  produtor.limite_creditos := nil;
  for i := sgLimiteCredito.FixedRows to sgLimiteCredito.RowCount -1 do begin
    SetLength(produtor.limite_creditos, Length(produtor.limite_creditos) + 1);
    produtor.limite_creditos[High(produtor.limite_creditos)].distribuidor_id := StrToInt(sgLimiteCredito.Cells[cDistribuidor_Id, i]);
    produtor.limite_creditos[High(produtor.limite_creditos)].limite_credito := StrToInt(sgLimiteCredito.Cells[cLimite_Credito, i]);
  end;

  try
    _Produtor.AtualizarProdutor(con, produtor);
    Application.MessageBox(Pchar('Produtor atualizado com sucesso!'), 'Atenção', 0);
    btCancelarClick(Self);
  except on e: Exception do
    ShowMessage(e.Message);
  end;
end;

procedure TFrProdutores.btInserirClick(Sender: TObject);
var
  limite_creditos: TArrayOfWebLimiteCredito;
  frmPesquisa: TFrPesquisarDistribuidores;
  linha: Integer;
  i: Integer;
  posicao: Integer;
begin
  inherited;
  frmPesquisa := TFrPesquisarDistribuidores.Create(Self);
  frmPesquisa.ShowModal;

  limite_creditos := nil;

  if frmPesquisa.distribuidor.distribuidor_id > 0 then begin
    SetLength(limite_creditos, 1);
    limite_creditos[0].distribuidor_id := frmPesquisa.distribuidor.distribuidor_id;
    limite_creditos[0].nome_distribuidor := frmPesquisa.distribuidor.nome;
  end;

  FreeAndNil(frmPesquisa);

  if limite_creditos = nil then
    Exit;

  posicao := -1;
  for i := sgLimiteCredito.FixedRows to sgLimiteCredito.RowCount -1 do  begin
    if limite_creditos[0].distribuidor_id <> StrToIntDef(sgLimiteCredito.Cells[cDistribuidor_Id, i], 0) then
      Continue;

    posicao := i;
    Break;
  end;

  if posicao <> -1 then begin
    Application.MessageBox('Distribuidor já incluído', 'Atenção', 0);
    sgLimiteCredito.Row := posicao;
    Exit;
  end;

  if limite_creditos <> nil then begin
    linha := sgLimiteCredito.RowCount -1;
    sgLimiteCredito.Cells[cDistribuidor, linha] := IntToStr(limite_creditos[0].distribuidor_id) + ' - ' + limite_creditos[0].nome_distribuidor;
    sgLimiteCredito.Cells[cLimite_Credito, linha] := FloatToStr(limite_creditos[0].limite_credito);

    sgLimiteCredito.Cells[cDistribuidor_Id, linha] := IntToStr(limite_creditos[0].distribuidor_id);

    linha := linha + 1;

    sgLimiteCredito.RowCount := linha;
  end;
end;

procedure TFrProdutores.btPesquisarClick(Sender: TObject);
var
  frmPesquisa: TFrPesquisarProdutores;
begin
  inherited;
  frmPesquisa := TFrPesquisarProdutores.Create(Self);
  frmPesquisa.ShowModal;

  produtores := nil;

  if frmPesquisa.produtor.produtor_id > 0 then begin
    SetLength(produtores, 1);
    produtores[0].produtor_id := frmPesquisa.produtor.produtor_id;
    produtores[0].nome := frmPesquisa.produtor.nome;
    produtores[0].inscricao := frmPesquisa.produtor.inscricao;
    produtores[0].cpf_cnpj := frmPesquisa.produtor.cpf_cnpj;
  end;

  FreeAndNil(frmPesquisa);

  if produtores <> nil then
    MontarDados(produtores);
end;

procedure TFrProdutores.eCodigoKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var
  con: TSqlConnection;
begin
  inherited;
  if Key = VK_RETURN then begin
    produtores := nil;

    if eCodigo.Text <> '' then begin
      con := _DB.Conexao;
      produtores := _Produtor.BuscarProdutores(con, 'and PRODUTOR_ID = ' + eCodigo.Text);

      if produtores = nil then begin
        Application.MessageBox('Produtor não encontrado!!', 'Atenção', 0);
        Abort;
      end;

      novo_registro := False;
    end;

    MontarDados(produtores);
  end;
end;

procedure TFrProdutores.FormCreate(Sender: TObject);
begin
  inherited;
  novo_registro := True;
  limite_creditos := nil;
end;

procedure TFrProdutores.FormShow(Sender: TObject);
begin
  inherited;
  sgLimiteCredito.Cells[cDistribuidor, sgLimiteCredito.FixedRows -1] := 'Distribuidor';
  sgLimiteCredito.Cells[cLimite_Credito, sgLimiteCredito.FixedRows -1] := 'Limite de crédito';
end;

procedure TFrProdutores.MontarDados(produtores: TArrayOfWebProdutor);
var
  i: Integer;
  con: TSqlConnection;
begin
  if not eNome.Enabled then
    eNome.Enabled := True;

  if not rgInscricao.Enabled then
    rgInscricao.Enabled := True;

  rgInscricao.ItemIndex := 0;

  if not meCpfCnpj.Enabled then
    meCpfCnpj.Enabled := True;

  for i := Low(produtores) to High(produtores) do begin
    eCodigo.Text := IntToStr(produtores[i].produtor_id);
    eNome.Text := produtores[i].nome;

    if produtores[i].inscricao = 'F' then begin
      rgInscricao.ItemIndex := 0;
      meCpfCnpj.EditMask := '000\.000\.000\-00;1;_';
    end
    else begin
      rgInscricao.ItemIndex := 1;
      meCpfCnpj.EditMask := '00\.000\.000\/0000\-00;1;_';
    end;

    meCpfCnpj.Text := produtores[i].cpf_cnpj;

    if not sgLimiteCredito.Enabled then begin
      sgLimiteCredito.Enabled := True;
      btInserir.Enabled := True;
      btAlterar.Enabled := True;
      btRemover.Enabled := True;
    end;
  end;

  if not novo_registro then begin
    con := _DB.Conexao;
    limite_creditos := _LimiteCredito.BuscarLimiteCreditos(con, StrToInt(eCodigo.Text));

    PreencherGrid;
  end;

  eNome.SetFocus;
  eCodigo.Enabled := False;
end;

procedure TFrProdutores.rgInscricaoClick(Sender: TObject);
begin
  inherited;
  if rgInscricao.ItemIndex = 0 then begin
    lbCpfCnpj.Caption := 'CPF';
    meCpfCnpj.EditMask := '000\.000\.000\-00;1;_';
  end
  else begin
    lbCpfCnpj.Caption := 'CNPJ';
    meCpfCnpj.EditMask := '00\.000\.000\/0000\-00;1;_';
  end;
end;

procedure TFrProdutores.VerificarDados;
begin
  if not _Biblioteca.ValidarCpfCnpj(meCpfCnpj.Text) then begin
    MessageDlg('CPF ou CNPJ inválido!', mtInformation, mbOKCancel, 0);
    meCpfCnpj.SetFocus;
    Abort;
  end;
end;

end.
