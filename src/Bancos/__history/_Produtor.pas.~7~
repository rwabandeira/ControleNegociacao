unit _Produtor;

interface

uses
  SysUtils, _Conexao, SqlExPr, Forms;

Type
  WebProdutor = record
    produtor_id: Integer;
    nome: string;
    inscricao: string;
    cpf_cnpj: string;
  end;
  TArrayOfWebProdutor = array of WebProdutor;

function BuscarProdutores(con: TSqlConnection; comando: string): TArrayOfWebProdutor;
procedure AtualizarProdutor(con: TSqlConnection; produtor: WebProdutor);
procedure ExcluirProdutor(con: TSqlConnection; produtor_id: Integer);

implementation

procedure ExcluirProdutor(con: TSqlConnection; produtor_id: Integer);
var
  pesq: TSqlQuery;
begin
  pesq := TSqlQuery.Create(con);
  pesq.SQLConnection := con;

  pesq.SQL.Add('select');
  pesq.SQL.Add('  count(*) as QTD');
  pesq.SQL.Add('from (');
  pesq.SQL.Add('  select');
  pesq.SQL.Add('    count(*) as QTD');
  pesq.SQL.Add('  from');
  pesq.SQL.Add('    LIMITE_CREDITOS');
  pesq.SQL.Add('  where PRODUTOR_ID = ' + QuotedStr(IntToStr(produtor_id)) + '');
  pesq.SQL.Add('  or DISTRIBUIDOR_ID = ' + QuotedStr(IntToStr(produtor_id)) + '');

  pesq.SQL.Add('  union all ');

  pesq.SQL.Add('  select');
  pesq.SQL.Add('    count(*) as QTD');
  pesq.SQL.Add('  from');
  pesq.SQL.Add('    NEGOCIACOES');
  pesq.SQL.Add('  where PRODUTOR_ID = ' + QuotedStr(IntToStr(produtor_id)) + '');
  pesq.SQL.Add('  or DISTRIBUIDOR_ID = ' + QuotedStr(IntToStr(produtor_id)) + '');
  pesq.SQL.Add(')');

  pesq.Open;

  if pesq.FieldByName('QTD').AsInteger > 0 then begin
    Application.MessageBox(Pchar('O produtor não pode ser excluido, pois existe registros que estão utilizando!'), 'Atenção', 0);
    Abort;
  end;

  pesq.SQL.Clear;
  pesq.SQL.Add('delete from PRODUTORES where PRODUTOR_ID = ' + QuotedStr(IntToStr(produtor_id)) + '');
  pesq.ExecSQL;

  pesq.Active := False;
  pesq.Free;
end;

procedure AtualizarProdutor(con: TSqlConnection; produtor: WebProdutor);
var
  pesq: TSqlQuery;
begin
  pesq := TSqlQuery.Create(con);
  pesq.SQLConnection := con;

  if produtor.produtor_id = 0 then begin
    pesq.SQL.Add('select gen_id(SEQ_PRODUTORES, 1) as ID from rdb$database');
    pesq.Open;
    produtor.produtor_id := pesq.FieldByName('ID').AsInteger;

    pesq.Close;
    pesq.SQL.Clear;

    pesq.SQL.Add('insert into PRODUTORES (');
    pesq.SQL.Add('  PRODUTOR_ID,');
    pesq.SQL.Add('  NOME,');
    pesq.SQL.Add('  INSCRICAO,');
    pesq.SQL.Add('  CPF_CNPJ');
    pesq.SQL.Add(') values (');
    pesq.SQL.Add('  ' + QuotedStr(IntToStr(produtor.produtor_id)) + ',');
    pesq.SQL.Add('  ' + QuotedStr(produtor.nome) + ',');
    pesq.SQL.Add('  ' + QuotedStr(produtor.inscricao) + ',');
    pesq.SQL.Add('  ' + QuotedStr(produtor.cpf_cnpj) + '');
    pesq.SQL.Add(')');
  end
  else begin
    pesq.SQL.Add('update PRODUTORES set');
    pesq.SQL.Add('  NOME = ' + QuotedStr(produtor.nome) + ',');
    pesq.SQL.Add('  INSCRICAO = ' + QuotedStr(produtor.inscricao) + ',');
    pesq.SQL.Add('  CPF_CNPJ = ' + QuotedStr(produtor.cpf_cnpj) + '');
    pesq.SQL.Add('where PRODUTOR_ID = ' + QuotedStr(IntToStr(produtor.produtor_id)) + '');
  end;

  pesq.ExecSQL;

  pesq.Active := False;
  pesq.Free;
end;

function BuscarProdutores(con: TSqlConnection; comando: string): TArrayOfWebProdutor;
var
  pesq: TSqlQuery;
begin
  Result := nil;

  pesq := TSqlQuery.Create(con);
  pesq.SQLConnection := con;

  pesq.SQL.Add('select');
  pesq.SQL.Add('  PRODUTOR_ID,');
  pesq.SQL.Add('  NOME,');
  pesq.SQL.Add('  INSCRICAO,');
  pesq.SQL.Add('  CPF_CNPJ');
  pesq.SQL.Add('from');
  pesq.SQL.Add('  PRODUTORES');

  pesq.SQL.Add('where 1 = 1');

  pesq.SQL.Add(comando);

  pesq.SQL.Add('order by');
  pesq.SQL.Add('  PRODUTOR_ID');

  pesq.Open;

  while not pesq.Eof do begin
    SetLength(Result, Length(Result) + 1);

    Result[High(Result)].produtor_id := pesq.FieldByName('PRODUTOR_ID').AsInteger;
    Result[High(Result)].nome := pesq.FieldByName('NOME').AsString;
    Result[High(Result)].inscricao := pesq.FieldByName('INSCRICAO').AsString;
    Result[High(Result)].cpf_cnpj := pesq.FieldByName('CPF_CNPJ').AsString;

    pesq.Next;
  end;

  pesq.Active := False;
  pesq.Free;
end;

end.
