unit _Biblioteca;

interface

uses
  SysUtils, Grids, StrUtils;

function  AllTrim(s:string):string;
function  ValidarCpfCnpj(cpf_cnpj: string): Boolean;
function  Numeros(valor: string): string;
function  IIf(condicao:Boolean; verdadeiro, falso: Variant): Variant;
function  FormatarCPFCNPJ(valor: string): string;
function  NPadrao(n: Double; decimais: Integer = 2): string;
function  Valor(s: string): variant; overload;
function  ValorInt(s:string):Integer;
function  RetirarPontos(s: string): string;
function  RetirarCaracter(s:string;c:char):string;
function  Decode(Base:variant;Possibilidades:array of variant):variant;
function  DecodeInt(Base:Integer;Possibilidades:array of variant):Integer;
function  ToNumber(vlr: Double):string;
function  PrimeiraLetraMaiscula(str: string): string;
function  FData(Data: TDateTime):string; overload;

procedure LimpaGrid(grid: TStringGrid);
procedure RemoverLinhaGrid(grid: TStringGrid; linha: Integer);

implementation

//Functions
function AllTrim(s:string):string;
var
  i:Integer;
begin
  Result := '';
  for i := 1 to Length(s) do begin
    if s[i]<>' ' then
      Result:=Result + s[i];
  end;
end;

function ValidarCpfCnpj(cpf_cnpj : string): Boolean;
Var
  i, d, b, digito: Byte;
  soma : Integer;
  cnpj : Boolean;
  dig_verif_info, dig_verif_calc : string;
begin
  Result := False;
  cpf_cnpj := Numeros(cpf_cnpj);

  // Caso o n�mero n�o seja 11 (CPF) ou 14 (CNPJ), aborta
  Case Length(cpf_cnpj) of
    11: cnpj := False;
    14: cnpj := True;
  else
    Exit;
  end;

  // Separa o n�mero do digito
  dig_verif_calc := '';
  dig_verif_info := Copy(cpf_cnpj, Length(cpf_cnpj) - 1, 2);
  cpf_cnpj := Copy(cpf_cnpj, 1, Length(cpf_cnpj) - 2);

  // Calcula o digito 1 e 2
  for d := 1 to 2 do begin
    b := IIf(d = 1, 2, 3); // BYTE
    soma := IIf(d = 1, 0, StrToIntDef(dig_verif_calc, 0) * 2);

    for i := Length(cpf_cnpj) downto 1 do begin
      soma := soma + (Ord(cpf_cnpj[i]) - Ord('0')) * b;
      Inc(b);

      if (b > 9) And cnpj then
        b := 2;
    end;

    digito := 11 - soma mod 11;
    if digito >= 10 then
      digito := 0;

    dig_verif_calc := dig_verif_calc + Chr(digito + Ord('0'));
  end;

  Result := dig_verif_calc = dig_verif_info;
end;

function Numeros(valor: string): string;
var
  i: Integer;
begin
  Result := '';
  for i := 1 To Length(valor) do begin
    if CharInSet(valor[i], ['0'..'9',#8]) then
      Result := Result + valor[i];
  end;
end;

function IIf(condicao: Boolean; verdadeiro, falso: Variant): Variant;
begin
  if condicao then
    Result := verdadeiro
  else
    Result := falso;
end;

function FormatarCPFCNPJ(valor: string): string;
begin
  if Length(valor) = 11 then begin
    Result :=
      Copy(valor, 1, 3) + '.' +
      Copy(valor, 4, 3) + '.' +
      Copy(valor, 7, 3) + '-' +
      Copy(valor, 11, 2);
  end
  else if (Length(valor) = 14) then begin
    Result :=
      Copy(valor, 1, 2) + '.' +
      Copy(valor, 3, 3) + '.' +
      Copy(valor, 6, 3) + '/' +
      Copy(valor, 9, 4) + '-' +
      Copy(valor, 13, 2);
  end;
end;

function  NPadrao(n: Double; decimais: Integer = 2): string;
begin
  if Decimais = 0 then
    Result := FormatFloat('#,##0', n)
  else if Decimais = 1 then
    Result := FormatFloat('#,##0.0', n)
  else if Decimais = 2 then
    Result := FormatFloat('#,##0.00', n)
  else if Decimais = 3 then
    Result := FormatFloat('#,##0.000', n)
  else if Decimais = 4 then
    Result := FormatFloat('#,##0.0000', n)
  else if Decimais = 5 then
    Result := FormatFloat('#,##0.00000', n)
  else if Decimais = 6 then
    Result := FormatFloat('#,##0.000000', n)
  else if Decimais = 7 then
    Result := FormatFloat('#,##0.0000000', n)
  else if Decimais = 8 then
    Result := FormatFloat('#,##0.00000000', n)
  else
    Result := FormatFloat('#,##0.00', n);
end;

function Valor(s: string):variant; overload;
begin
  s := RetirarPontos(AllTrim(s));
  try
    Result:=StrToFloat(s);
  except
    Result := 0;
  end;
end;

function ValorInt(s: string):Integer;
begin
  s := RetirarPontos(AllTrim(s));
  try
    Result := StrToInt(s);
  except
    Result := 0;
  end;
end;

function  RetirarPontos(s: string): string;
begin
  Result := RetirarCaracter(s, '.');
end;

function RetirarCaracter(s:string;c:char):string;
var
  i:Integer;
begin
  Result:='';
  for i:=1 to Length(s) do begin
    if s[i] <> c then
      Result:=Result + s[i];
  end;
end;

function Decode(Base:variant;Possibilidades:array of variant):variant;
var
  EPar:Boolean;
  i:Integer;
  MetadeItens:Integer;
begin
  EPar:=( ( High(Possibilidades) + 1 ) mod 2 = 0 );
  if EPar then
    Result:=''
  else
    Result:=Possibilidades[High(Possibilidades)];

  MetadeItens:=( High(Possibilidades) - 1) div 2;

  for i:=0 to MetadeItens do begin
    if Base=Possibilidades[i * 2] then begin
      Result:=Possibilidades[i * 2 + 1];
      Break;
    end;
  end;
end;

function DecodeInt(Base:Integer;Possibilidades:array of variant):Integer;
var
  EPar:Boolean;
  i:Integer;
  MetadeItens:Integer;
begin
  EPar:=( ( High(Possibilidades) + 1 ) mod 2 = 0 );
  if EPar then
    Result:=0
  else
    Result:=Possibilidades[High(Possibilidades)];

  MetadeItens:=( High(Possibilidades) - 1) div 2;

  for i:=0 to MetadeItens do begin
    if Base=Possibilidades[i * 2] then begin
      Result:=Possibilidades[i * 2 + 1];
      Break;
    end;
  end;
end;

function  ToNumber(vlr :Double):string;
begin
  Result := AnsiReplaceStr(FloatToStr(vlr),',','.');
end;

function PrimeiraLetraMaiscula(str: string): string;
var
  i: integer;
  esp: boolean;
begin
  str := LowerCase(Trim(str));

  for i := 1 to Length(str) do begin
    if i = 1 then
      str[i] := UpCase(str[i])
    else begin
      if i <> Length(str) then begin
        esp := (str[i] = ' ');

        if esp then
          str[i + 1] := UpCase(str[i + 1]);
      end;
    end;
  end;

  Result := Str;
end;

function FData(Data:TDateTime):string; overload;
begin
  if Data = 0 then
    Result := Espacos(10)
  else
    Result := FormatDateTime('DD/MM/YYYY', Data);
end;

//Procedures
procedure LimpaGrid(grid: TStringGrid);
var
  lin: Integer;
  col: Integer;
begin
  for lin := 1 to grid.RowCount - 1 do begin
    for col := 0 to grid.ColCount - 1 do
      grid.Cells[col, lin] := '';
  end;
end;

procedure RemoverLinhaGrid(grid: TStringGrid; linha: Integer);
var
  i: Integer;
begin
  for i:= linha to grid.RowCount do
    grid.Rows[i] := grid.Rows[i + 1];

  if grid.RowCount >2 then
    grid.RowCount := grid.RowCount - 1;
end;

end.
